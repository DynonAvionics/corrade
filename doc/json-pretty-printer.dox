/*
    This file is part of Corrade.

    Copyright © 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016,
                2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025
              Vladimír Vondruš <mosra@centrum.cz>

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

namespace Corrade {
/** @page json-pretty-printer JSON pretty-printer
@brief Uses @ref Utility::Json and @ref Utility::JsonWriter to reformat a JSON file
@m_since_latest

@m_footernavigation

The @ref Utility::Json class by default only tokenizes the input without
actually parsing anything. While such raw token stream isn't directly usable
for querying the file contents, it can be passed as-is to
@ref Utility::JsonWriter::writeJson(Utility::JsonToken), allowing for efficient
pretty-printing of minified JSON files and vice versa. Here's the code in
full, complete with using @ref Utility::Arguments to expose a bunch of
formatting options:

@dontinclude json/main.cpp
@skip #include
@until }
@until }
@until }

The following CMake commands then produce a `corrade-json` executable:

@dontinclude json/CMakeLists.txt
@skip find_package
@until target_link_libraries

Besides JSON being both an input and output, the code could be modified to for
example parse a JSON-compatible data representation such as
[JSON5](https://json5.org) or [CBOR](https://en.wikipedia.org/wiki/CBOR) and
output a regular JSON. See @ref Utility-Json-from-tokens "the corresponding section in Utility::Json documentation"
for more information.

The full file content is linked below. Full source code is also available in
the [GitHub repository](https://github.com/mosra/corrade/tree/master/src/examples/json).

-   @ref json/CMakeLists.txt "CMakeLists.txt"
-   @ref json/main.cpp "main.cpp"

@example json/main.cpp @m_examplenavigation{json-pretty-printer,json/} @m_footernavigation
@example json/CMakeLists.txt @m_examplenavigation{json-pretty-printer,json/} @m_footernavigation

*/
}
